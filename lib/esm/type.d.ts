import { ValidationErrors } from "./errors.js";
import { MobilettoOrmLogger } from "./util.js";
import { MobilettoOrmDefaultFieldOpts, MobilettoOrmFieldValue, MobilettoOrmFieldDefConfig, MobilettoOrmFieldDefConfigs, MobilettoOrmFieldIndexableValue } from "./field.js";
import { MobilettoOrmInstance, MobilettoOrmNewInstanceOpts } from "./constants.js";
import { FieldValidators, TypeValidations } from "./validation.js";
export type MobilettoOrmTypeDefConfig = {
    typeName: string;
    primary?: string;
    basePath?: string;
    alternateIdFields?: string[];
    fields: MobilettoOrmFieldDefConfigs;
    tableFields?: string[];
    maxVersions?: number;
    minWrites?: number;
    validators?: FieldValidators;
    validations?: TypeValidations;
    logger?: MobilettoOrmLogger;
};
export type MobilettoOrmPersistable = {
    id: string;
    ctime: number;
    mtime: number;
    [prop: string]: any;
};
export declare class MobilettoOrmTypeDef {
    readonly config: MobilettoOrmTypeDefConfig;
    readonly typeName: string;
    readonly basePath: string;
    primary?: string;
    readonly alternateIdFields: string[] | null | undefined;
    fields: MobilettoOrmFieldDefConfigs;
    readonly indexes: string[];
    readonly tabIndexes: string[];
    readonly redaction: string[];
    readonly tableFields: string[];
    readonly maxVersions: number;
    readonly minWrites: number;
    readonly specificPathRegex: RegExp;
    readonly validators: FieldValidators;
    readonly validations: TypeValidations;
    readonly logger: MobilettoOrmLogger | null;
    constructor(config: MobilettoOrmTypeDefConfig);
    _log(msg: string, level: string): void;
    log_info(msg: string): void;
    log_warn(msg: string): void;
    log_error(msg: string): void;
    defaultFieldValue(field: MobilettoOrmFieldDefConfig, opts: MobilettoOrmDefaultFieldOpts): MobilettoOrmFieldValue;
    newInstanceFields(fields: MobilettoOrmFieldDefConfigs, rootThing: MobilettoOrmPersistable, thing: MobilettoOrmPersistable, opts?: MobilettoOrmNewInstanceOpts): void;
    newBlankInstance(): MobilettoOrmPersistable;
    newInstance(opts?: MobilettoOrmNewInstanceOpts): MobilettoOrmInstance;
    newFullInstance(): MobilettoOrmInstance;
    newDummyInstance(): MobilettoOrmInstance;
    validate(thing: MobilettoOrmInstance, current: MobilettoOrmInstance): Promise<{
        id: any;
        version: any;
        ctime: any;
        mtime: any;
    }>;
    typeDefValidations(validated: MobilettoOrmPersistable, errors: ValidationErrors): Promise<void>;
    hasRedactions(): boolean;
    redact(thing: MobilettoOrmInstance): MobilettoOrmInstance;
    idField(thing: MobilettoOrmInstance): string | null;
    id(thing: MobilettoOrmInstance): string | null;
    _tabIndexes(fields?: MobilettoOrmFieldDefConfigs): string[];
    tabIndexedFields(fields?: MobilettoOrmFieldDefConfigs): {
        name: string;
        type?: import("./field.js").MobilettoOrmFieldType | undefined;
        control?: import("./field.js").MobilettoOrmFieldControl | undefined;
        default?: MobilettoOrmFieldValue | undefined;
        required?: boolean | undefined;
        when?: ((val: MobilettoOrmInstance) => boolean) | undefined;
        primary?: boolean | undefined;
        updatable?: boolean | undefined;
        normalize?: ((val: any) => any) | undefined;
        regex?: RegExp | undefined;
        min?: number | undefined;
        max?: number | undefined;
        minValue?: number | undefined;
        maxValue?: number | undefined;
        values?: MobilettoOrmFieldIndexableValue[] | undefined;
        labels?: string[] | undefined;
        items?: import("./field.js").MobilettoOrmFieldItem[] | undefined;
        index?: boolean | undefined;
        redact?: boolean | undefined;
        tabIndex?: number | undefined;
        render?: import("./field.js").MobilettoOrmFieldRender | undefined;
        fields?: Record<string, MobilettoOrmFieldDefConfig> | undefined;
        tabIndexes?: string[] | undefined;
    }[];
    typePath(): string;
    generalPath(id: MobilettoOrmInstance | string): string;
    isSpecificPath(p: string): RegExpMatchArray | null;
    specificBasename(obj: MobilettoOrmInstance): string;
    idFromPath(p: string): string;
    specificPath(obj: MobilettoOrmInstance): string;
    indexPath(field: string, value: MobilettoOrmFieldIndexableValue): string;
    indexSpecificPath(field: string, obj: MobilettoOrmInstance): string;
    tombstone(thing: MobilettoOrmInstance): {
        id: any;
        version: string;
        removed: boolean;
        ctime: any;
        mtime: number;
    };
    isTombstone(thing: MobilettoOrmInstance): boolean;
    extend(otherConfig: MobilettoOrmTypeDefConfig): MobilettoOrmTypeDef;
}
